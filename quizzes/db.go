// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package quiz

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createQuestionStmt, err = db.PrepareContext(ctx, createQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query CreateQuestion: %w", err)
	}
	if q.createQuizStmt, err = db.PrepareContext(ctx, createQuiz); err != nil {
		return nil, fmt.Errorf("error preparing query CreateQuiz: %w", err)
	}
	if q.getQuizStmt, err = db.PrepareContext(ctx, getQuiz); err != nil {
		return nil, fmt.Errorf("error preparing query GetQuiz: %w", err)
	}
	if q.getQuizWithQuestionsStmt, err = db.PrepareContext(ctx, getQuizWithQuestions); err != nil {
		return nil, fmt.Errorf("error preparing query GetQuizWithQuestions: %w", err)
	}
	if q.getRandomQuestionsStmt, err = db.PrepareContext(ctx, getRandomQuestions); err != nil {
		return nil, fmt.Errorf("error preparing query GetRandomQuestions: %w", err)
	}
	if q.listQuizzesStmt, err = db.PrepareContext(ctx, listQuizzes); err != nil {
		return nil, fmt.Errorf("error preparing query ListQuizzes: %w", err)
	}
	if q.updateQuestionStmt, err = db.PrepareContext(ctx, updateQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateQuestion: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createQuestionStmt != nil {
		if cerr := q.createQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createQuestionStmt: %w", cerr)
		}
	}
	if q.createQuizStmt != nil {
		if cerr := q.createQuizStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createQuizStmt: %w", cerr)
		}
	}
	if q.getQuizStmt != nil {
		if cerr := q.getQuizStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQuizStmt: %w", cerr)
		}
	}
	if q.getQuizWithQuestionsStmt != nil {
		if cerr := q.getQuizWithQuestionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQuizWithQuestionsStmt: %w", cerr)
		}
	}
	if q.getRandomQuestionsStmt != nil {
		if cerr := q.getRandomQuestionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRandomQuestionsStmt: %w", cerr)
		}
	}
	if q.listQuizzesStmt != nil {
		if cerr := q.listQuizzesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listQuizzesStmt: %w", cerr)
		}
	}
	if q.updateQuestionStmt != nil {
		if cerr := q.updateQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateQuestionStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	createQuestionStmt       *sql.Stmt
	createQuizStmt           *sql.Stmt
	getQuizStmt              *sql.Stmt
	getQuizWithQuestionsStmt *sql.Stmt
	getRandomQuestionsStmt   *sql.Stmt
	listQuizzesStmt          *sql.Stmt
	updateQuestionStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		createQuestionStmt:       q.createQuestionStmt,
		createQuizStmt:           q.createQuizStmt,
		getQuizStmt:              q.getQuizStmt,
		getQuizWithQuestionsStmt: q.getQuizWithQuestionsStmt,
		getRandomQuestionsStmt:   q.getRandomQuestionsStmt,
		listQuizzesStmt:          q.listQuizzesStmt,
		updateQuestionStmt:       q.updateQuestionStmt,
	}
}
